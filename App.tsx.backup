/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import React from 'react';
import {NavigationContainer} from '@react-navigation/native';
import {createNativeStackNavigator} from '@react-navigation/native-stack';
import {createBottomTabNavigator} from '@react-navigation/bottom-tabs';
import {SafeAreaProvider} from 'react-native-safe-area-context';
import {
  Text,
  TouchableOpacity,
  View,
  StyleSheet,
  Modal,
  Animated,
  Dimensions,
  TouchableWithoutFeedback,
  StatusBar,
} from 'react-native';
import OnboardingScreen from './src/screens/OnboardingScreen';
import LoginScreen from './src/screens/LoginScreen';
import SignUpScreen from './src/screens/SignUpScreen';
import ForgotPasswordScreen from './src/screens/ForgotPasswordScreen';
import VerifyCodeScreen from './src/screens/VerifyCodeScreen';
import CreateNewPasswordScreen from './src/screens/CreateNewPasswordScreen';
import PasswordChangedSuccessScreen from './src/screens/PasswordChangedSuccessScreen';
import AppIntroScreen from './src/screens/AppIntroScreen';
import HomeScreen from './src/screens/HomeScreen';
import CalendarScreen from './src/screens/CalendarScreen';
import MapScreen from './src/screens/MapScreen';
import ProfileScreen from './src/screens/ProfileScreen';
import CreateEventScreen from './src/screens/CreateEventScreen.js';
import CreateTrainingScreen from './src/screens/CreateTrainingScreen.js';
import CreateMatchScreen from './src/screens/CreateMatchScreen.js';
import CreateTeamScreen from './src/screens/CreateTeamScreen.js';
import MyActivitiesScreen from './src/screens/MyActivitiesScreen.js';
import {
  HomeIcon,
  CalendarIcon,
  MapIcon,
  ProfileIcon,
} from './src/components/TabIcons';

// Navigation stack tiplerini tanƒ±mlƒ±yoruz
export type RootStackParamList = {
  OnboardingScreen: undefined;
  LoginScreen: undefined;
  SignUpScreen: undefined;
  RegisterScreen: undefined; // OnboardingScreen'den kullanƒ±lƒ±yor
  ForgotPasswordScreen: undefined;
  VerifyCodeScreen: {email: string};
  CreateNewPasswordScreen: {email: string};
  PasswordChangedSuccessScreen: {email: string};
  AppIntroScreen: undefined;
  MainTabs: undefined;
  CreateEventScreen: undefined;
  CreateTrainingScreen: undefined;
  CreateMatchScreen: undefined;
  CreateTeamScreen: undefined;
  MyActivitiesScreen: undefined;
};

// Tab Navigator tipleri
export type TabParamList = {
  Home: undefined;
  Calendar: undefined;
  Add: undefined; // Plus button placeholder
  Map: undefined;
  Profile: undefined;
};

const Stack = createNativeStackNavigator<RootStackParamList>();
const Tab = createBottomTabNavigator<TabParamList>();

// Plus butonu i√ßin √∂zel bile≈üen
const PlusButton = ({navigation}: {navigation: any}) => {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false);
  const scaleValue = React.useRef(new Animated.Value(0)).current;
  const opacityValue = React.useRef(new Animated.Value(0)).current;
  const rotateValue = React.useRef(new Animated.Value(0)).current;

  const toggleMenu = () => {
    if (!isMenuOpen) {
      setIsMenuOpen(true);
      // A√ßƒ±lma animasyonu
      Animated.parallel([
        Animated.spring(scaleValue, {
          toValue: 1,
          useNativeDriver: true,
          tension: 100,
          friction: 8,
        }),
        Animated.timing(opacityValue, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }),
        Animated.timing(rotateValue, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start();
    } else {
      // Kapanma animasyonu
      Animated.parallel([
        Animated.spring(scaleValue, {
          toValue: 0,
          useNativeDriver: true,
          tension: 100,
          friction: 8,
        }),
        Animated.timing(opacityValue, {
          toValue: 0,
          duration: 150,
          useNativeDriver: true,
        }),
        Animated.timing(rotateValue, {
          toValue: 0,
          duration: 200,
          useNativeDriver: true,
        }),
      ]).start(() => {
        setIsMenuOpen(false);
      });
    }
  };

  const navigateToScreen = (screenName: string) => {
    // √ñnce men√ºy√º kapat
    Animated.parallel([
      Animated.spring(scaleValue, {
        toValue: 0,
        useNativeDriver: true,
        tension: 100,
        friction: 8,
      }),
      Animated.timing(opacityValue, {
        toValue: 0,
        duration: 150,
        useNativeDriver: true,
      }),
    ]).start(() => {
      setIsMenuOpen(false);
      // Sonra navigate et
      navigation.getParent()?.navigate(screenName);
    });
  };

  const rotate = rotateValue.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '45deg'],
  });

  const menuItems = [
    {
      id: 'event',
      title: 'Etkinlik Olu≈ütur',
      subtitle: 'Yeni etkinlik d√ºzenle',
      icon: 'üéØ',
      color: '#FF6B35',
      screen: 'CreateEventScreen',
    },
    {
      id: 'training',
      title: 'Antrenman Planla',
      subtitle: 'Antrenman programƒ± olu≈ütur',
      icon: 'üèÄ',
      color: '#4CAF50',
      screen: 'CreateTrainingScreen',
    },
    {
      id: 'match',
      title: 'Ma√ß Organize Et',
      subtitle: 'Kar≈üƒ±la≈üma d√ºzenle',
      icon: '‚ö°',
      color: '#2196F3',
      screen: 'CreateMatchScreen',
    },
    {
      id: 'team',
      title: 'Takƒ±m Olu≈ütur',
      subtitle: 'Yeni takƒ±m olu≈ütur',
      icon: 'üë•',
      color: '#9C27B0',
      screen: 'CreateTeamScreen',
    },
    {
      id: 'activities',
      title: 'Aktivitelerim',
      subtitle: 'Olu≈üturduklarƒ±mƒ± g√∂r√ºnt√ºle',
      icon: 'üìã',
      color: '#607D8B',
      screen: 'MyActivitiesScreen',
    },
  ];

  return (
    <>
      {/* Modal Overlay */}
      <Modal
        visible={isMenuOpen}
        transparent={true}
        animationType="none"
        statusBarTranslucent={true}>
        <TouchableWithoutFeedback onPress={toggleMenu}>
          <View style={styles.modalOverlay}>
            <StatusBar
              backgroundColor="rgba(0,0,0,0.5)"
              barStyle="light-content"
            />

            {/* Menu Container */}
            <Animated.View
              style={[
                styles.modernMenuContainer,
                {
                  transform: [{scale: scaleValue}],
                  opacity: opacityValue,
                },
              ]}>
              {/* Header */}
              <View style={styles.menuHeader}>
                <Text style={styles.menuTitle}>Yeni Olu≈ütur</Text>
                <Text style={styles.menuSubtitle}>Ne yapmak istiyorsun?</Text>
              </View>

              {/* Menu Items */}
              <View style={styles.menuItemsContainer}>
                {menuItems.map((item, index) => (
                  <Animated.View
                    key={item.id}
                    style={[
                      styles.modernMenuItem,
                      {
                        transform: [
                          {
                            translateY: scaleValue.interpolate({
                              inputRange: [0, 1],
                              outputRange: [50, 0],
                            }),
                          },
                        ],
                        opacity: opacityValue,
                      },
                    ]}>
                    <TouchableOpacity
                      style={styles.menuItemTouchable}
                      onPress={() => navigateToScreen(item.screen)}
                      activeOpacity={0.7}>
                      <View
                        style={[
                          styles.menuItemIconContainer,
                          {backgroundColor: item.color},
                        ]}>
                        <Text style={styles.menuItemIcon}>{item.icon}</Text>
                      </View>
                      <View style={styles.menuItemTextContainer}>
                        <Text style={styles.menuItemTitle}>{item.title}</Text>
                        <Text style={styles.menuItemSubtitle}>
                          {item.subtitle}
                        </Text>
                      </View>
                      <Text style={styles.menuItemArrow}>‚Üí</Text>
                    </TouchableOpacity>
                  </Animated.View>
                ))}
              </View>

              {/* Footer */}
              <View style={styles.menuFooter}>
                <TouchableOpacity
                  style={styles.cancelButton}
                  onPress={toggleMenu}>
                  <Text style={styles.cancelButtonText}>ƒ∞ptal</Text>
                </TouchableOpacity>
              </View>
            </Animated.View>
          </View>
        </TouchableWithoutFeedback>
      </Modal>

      {/* Plus Button */}
      <View style={styles.plusButtonContainer}>
        <TouchableOpacity
          style={styles.plusButton}
          onPress={toggleMenu}
          activeOpacity={0.8}>
          <Animated.Text
            style={[
              styles.plusButtonText,
              {
                transform: [{rotate}],
              },
            ]}>
            +
          </Animated.Text>
        </TouchableOpacity>
      </View>
    </>
  );
};

// Ana tab navigator bile≈üeni
function MainTabNavigator(): React.JSX.Element {
  return (
    <Tab.Navigator
      screenOptions={({navigation}) => ({
        headerShown: false,
        tabBarStyle: {
          backgroundColor: '#FFFFFF',
          borderTopWidth: 1,
          borderTopColor: '#E0E0E0',
          height: 90,
          paddingBottom: 25,
          paddingTop: 15,
          borderTopLeftRadius: 0,
          borderTopRightRadius: 0,
        },
        tabBarActiveTintColor: '#000000',
        tabBarInactiveTintColor: '#666666',
        tabBarLabelStyle: {
          fontSize: 0, // Gizle labels
          fontWeight: '500',
        },
        tabBarIconStyle: {
          marginTop: 5,
        },
      })}>
      <Tab.Screen
        name="Home"
        component={HomeScreen}
        options={{
          tabBarLabel: '',
          tabBarIcon: ({focused}: {focused: boolean}) => (
            <View style={styles.tabIconContainer}>
              <HomeIcon color={focused ? '#000000' : '#666666'} size={24} />
            </View>
          ),
        }}
      />
      <Tab.Screen
        name="Calendar"
        component={CalendarScreen}
        options={{
          tabBarLabel: '',
          tabBarIcon: ({focused}: {focused: boolean}) => (
            <View style={styles.tabIconContainer}>
              <CalendarIcon color={focused ? '#000000' : '#666666'} size={24} />
            </View>
          ),
        }}
      />
      <Tab.Screen
        name="Add"
        component={View} // Dummy component
        options={({navigation}) => ({
          tabBarLabel: '',
          tabBarIcon: () => <PlusButton navigation={navigation} />,
        })}
        listeners={{
          tabPress: e => {
            e.preventDefault(); // Prevent default tab behavior
          },
        }}
      />
      <Tab.Screen
        name="Map"
        component={MapScreen}
        options={{
          tabBarLabel: '',
          tabBarIcon: ({focused}: {focused: boolean}) => (
            <View style={styles.tabIconContainer}>
              <MapIcon color={focused ? '#000000' : '#666666'} size={24} />
            </View>
          ),
        }}
      />
      <Tab.Screen
        name="Profile"
        component={ProfileScreen}
        options={{
          tabBarLabel: '',
          tabBarIcon: ({focused}: {focused: boolean}) => (
            <View style={styles.tabIconContainer}>
              <ProfileIcon color={focused ? '#000000' : '#666666'} size={24} />
            </View>
          ),
        }}
      />
    </Tab.Navigator>
  );
}

function App(): React.JSX.Element {
  return (
    <SafeAreaProvider>
      <NavigationContainer>
        <Stack.Navigator
          initialRouteName="OnboardingScreen"
          screenOptions={{
            headerShown: false, // Ekranlarƒ±n kendi header'larƒ±nƒ± kullanmasƒ± i√ßin
            gestureEnabled: true, // iOS swipe gesture'ƒ± aktif
            animation: 'slide_from_right', // Modern slide animasyonu
          }}>
          <Stack.Screen name="OnboardingScreen" component={OnboardingScreen} />
          <Stack.Screen name="LoginScreen" component={LoginScreen} />
          <Stack.Screen name="SignUpScreen" component={SignUpScreen} />
          <Stack.Screen name="RegisterScreen" component={SignUpScreen} />
          <Stack.Screen
            name="ForgotPasswordScreen"
            component={ForgotPasswordScreen}
          />
          <Stack.Screen name="VerifyCodeScreen" component={VerifyCodeScreen} />
          <Stack.Screen
            name="CreateNewPasswordScreen"
            component={CreateNewPasswordScreen}
          />
          <Stack.Screen
            name="PasswordChangedSuccessScreen"
            component={PasswordChangedSuccessScreen}
          />
          <Stack.Screen name="AppIntroScreen" component={AppIntroScreen} />
          <Stack.Screen name="MainTabs" component={MainTabNavigator} />

          {/* Yeni ekranlar - modal stilinde */}
          <Stack.Screen
            name="CreateEventScreen"
            component={CreateEventScreen}
            options={{
              presentation: 'modal',
              animation: 'slide_from_bottom',
            }}
          />
          <Stack.Screen
            name="CreateTrainingScreen"
            component={CreateTrainingScreen}
            options={{
              presentation: 'modal',
              animation: 'slide_from_bottom',
            }}
          />
          <Stack.Screen
            name="CreateMatchScreen"
            component={CreateMatchScreen}
            options={{
              presentation: 'modal',
              animation: 'slide_from_bottom',
            }}
          />
          <Stack.Screen
            name="CreateTeamScreen"
            component={CreateTeamScreen}
            options={{
              presentation: 'modal',
              animation: 'slide_from_bottom',
            }}
          />
          <Stack.Screen
            name="MyActivitiesScreen"
            component={MyActivitiesScreen}
            options={{
              presentation: 'modal',
              animation: 'slide_from_bottom',
            }}
          />
        </Stack.Navigator>
      </NavigationContainer>
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  // Tab Icon Styles
  tabIconContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    width: 40,
    height: 40,
  },
  activeTabIconContainer: {
    backgroundColor: 'transparent',
  },
  tabIcon: {
    fontSize: 26,
    color: '#000000',
  },
  activeTabIcon: {
    color: '#000000',
  },
  unicodeIcon: {
    fontSize: 24,
    textAlign: 'center',
  },

  // Plus Button Styles
  plusButtonContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: -15,
  },
  plusButton: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#2E5BFF',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 10,
  },
  plusButtonText: {
    color: '#FFFFFF',
    fontSize: 28,
    fontWeight: 'bold',
    lineHeight: 28,
  },

  // Modern Modal Menu Styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'flex-end',
  },
  modernMenuContainer: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 24,
    borderTopRightRadius: 24,
    paddingTop: 24,
    paddingHorizontal: 24,
    paddingBottom: 40,
    maxHeight: Dimensions.get('window').height * 0.7,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: -8,
    },
    shadowOpacity: 0.25,
    shadowRadius: 16,
    elevation: 20,
  },
  menuHeader: {
    alignItems: 'center',
    marginBottom: 32,
    paddingTop: 8,
  },
  menuTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1A1D29',
    marginBottom: 8,
  },
  menuSubtitle: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  menuItemsContainer: {
    marginBottom: 24,
  },
  modernMenuItem: {
    marginBottom: 4,
    borderRadius: 16,
    backgroundColor: '#F8F9FA',
  },
  menuItemTouchable: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    borderRadius: 16,
  },
  menuItemIconContainer: {
    width: 56,
    height: 56,
    borderRadius: 28,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  menuItemIcon: {
    fontSize: 24,
  },
  menuItemTextContainer: {
    flex: 1,
  },
  menuItemTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1A1D29',
    marginBottom: 4,
  },
  menuItemSubtitle: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },
  menuItemArrow: {
    fontSize: 20,
    color: '#666666',
    marginLeft: 12,
  },
  menuFooter: {
    alignItems: 'center',
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
  },
  cancelButton: {
    backgroundColor: '#F5F6FA',
    paddingHorizontal: 32,
    paddingVertical: 12,
    borderRadius: 24,
    minWidth: 120,
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666666',
    textAlign: 'center',
  },
});

export default App;
